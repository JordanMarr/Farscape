namespace Farscape.Core

open System
open System.IO
open System.Text
open Farscape.Core.ProjectOptions // Add this line

/// Module for generating F# project files
module Project =
    /// <summary>
    /// Generates the F# project file.
    /// </summary>
    /// <param name="options">The project options.</param>
    /// <param name="projectFile">The path to the project file.</param>
    let rec generateProjectFile (options: ProjectOptions.ProjectOptions) (projectFile: string) : unit =
        let sb = StringBuilder()

        sb.AppendLine("<Project Sdk=\"Microsoft.NET.Sdk\">") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("  <PropertyGroup>") |> ignore
        sb.AppendLine("    <TargetFramework>net9.0</TargetFramework>") |> ignore
        sb.AppendLine("    <GenerateDocumentationFile>true</GenerateDocumentationFile>") |> ignore
        sb.AppendLine($"    <RootNamespace>{options.Namespace}</RootNamespace>") |> ignore
        sb.AppendLine($"    <AssemblyName>{options.LibraryName}</AssemblyName>") |> ignore
        sb.AppendLine("  </PropertyGroup>") |> ignore
        sb.AppendLine() |> ignore

        // Add F# source files
        sb.AppendLine("  <ItemGroup>") |> ignore
        sb.AppendLine($"    <Compile Include=\"{options.LibraryName}.fs\" />") |> ignore
        sb.AppendLine("  </ItemGroup>") |> ignore
        sb.AppendLine() |> ignore

        // Add NuGet package references
        if not options.NuGetPackages.IsEmpty then
            sb.AppendLine("  <ItemGroup>") |> ignore
            for (package, version) in options.NuGetPackages do
                sb.AppendLine($"    <PackageReference Include=\"{package}\" Version=\"{version}\" />") |> ignore
            sb.AppendLine("  </ItemGroup>") |> ignore
            sb.AppendLine() |> ignore

        // Add project references
        if not options.References.IsEmpty then
            sb.AppendLine("  <ItemGroup>") |> ignore
            for reference in options.References do
                sb.AppendLine($"    <ProjectReference Include=\"{reference}\" />") |> ignore
            sb.AppendLine("  </ItemGroup>") |> ignore
            sb.AppendLine() |> ignore

        sb.AppendLine("</Project>") |> ignore

        // Write the project file
        File.WriteAllText(projectFile, sb.ToString())

    /// <summary>
    /// Generates the F# source file.
    /// </summary>
    /// <param name="code">The generated F# code.</param>
    /// <param name="sourceFile">The path to the source file.</param>
    let generateSourceFile (code: string) (sourceFile: string) : unit =
        File.WriteAllText(sourceFile, code)

    /// <summary>
    /// Generates the README file.
    /// </summary>
    /// <param name="options">The project options.</param>
    /// <param name="readmeFile">The path to the README file.</param>
    let generateReadmeFile (options: ProjectOptions.ProjectOptions) (readmeFile: string) : unit =
        let sb = StringBuilder()

        sb.AppendLine($"# {options.LibraryName} F# Bindings") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("Generated by Farscape: F# Native Library Binding Generator") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("## Overview") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine($"This package provides F# bindings for the native {options.LibraryName} library. It was automatically generated based on the C++ header file at:") |> ignore
        sb.AppendLine($"`{options.HeaderFile}`") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("## Usage") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("```fsharp") |> ignore
        sb.AppendLine($"open {options.Namespace}") |> ignore
        sb.AppendLine($"open {options.Namespace}.{options.LibraryName}") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("// Example usage") |> ignore
        sb.AppendLine("let result = SomeFunction(arg1, arg2)") |> ignore
        sb.AppendLine("```") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("## Installation") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("1. Add a reference to this project in your F# solution") |> ignore
        sb.AppendLine("2. Make sure the native library is available in your application's path") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("## Requirements") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("- .NET 9.0 or higher") |> ignore
        sb.AppendLine($"- Native {options.LibraryName} library") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("## License") |> ignore
        sb.AppendLine() |> ignore
        sb.AppendLine("MIT") |> ignore

        // Write the README file
        File.WriteAllText(readmeFile, sb.ToString())

    /// <summary>
    /// Generates the project file, source file, and readme file for the binding project.
    /// </summary>
    /// <param name="options">The project options.</param>
    /// <param name="code">The generated F# code.</param>
    /// <returns>A tuple containing the paths to the project file, source file, and readme file.</returns>
    let generateProject (options: ProjectOptions.ProjectOptions) (code: string) : string * string * string =
        // Ensure output directory exists
        Directory.CreateDirectory(options.OutputDirectory) |> ignore

        let projectFile = Path.Combine(options.OutputDirectory, $"{options.LibraryName}.fsproj")
        let sourceFile = Path.Combine(options.OutputDirectory, $"{options.LibraryName}.fs")
        let readmeFile = Path.Combine(options.OutputDirectory, "README.md")

        // Generate the files
        generateProjectFile options projectFile
        generateSourceFile code sourceFile
        generateReadmeFile options readmeFile

        (projectFile, sourceFile, readmeFile)